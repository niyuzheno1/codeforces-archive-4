for more details please visit : https://codeforces.com/contest/1529/problems
Processing math: 100%



__

![](//codeforces.org/s/78737/images/codeforces-logo-with-telegram.png)

![In English](//codeforces.org/s/78737/images/flags/24/gb.png) ![По-
русски](//codeforces.org/s/78737/images/flags/24/ru.png)

  

Codeforces Round #722 (Div. 2)

The problem statement has recently been changed. View the changes.

×

A. Eshag Loves Big Arrays

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

Eshag has an array a consisting of n integers.

Eshag can perform the following operation any number of times: choose some
subsequence of a and delete every element from it which is strictly larger
than AVG, where AVG is the average of the numbers in the chosen subsequence.

For example, if a=[1,4,3,2,4] and Eshag applies the operation to the
subsequence containing a1, a2, a4 and a5, then he will delete those of these 4
elements which are larger than a1+a2+a4+a54=114, so after the operation, the
array a will become a=[1,3,2].

Your task is to find the maximum number of elements Eshag can delete from the
array a by applying the operation described above some number (maybe, zero)
times.

A sequence b is a subsequence of an array c if b can be obtained from c by
deletion of several (possibly, zero or all) elements.

Input

The first line contains an integer t (1≤t≤100) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains an integer n (1≤n≤100) — the length
of the array a.

The second line of each test case contains n integers a1,a2,…,an (1≤ai≤100) —
the elements of the array a.

Output

For each test case print a single integer — the maximum number of elements
Eshag can delete from the array a.

Example

Input

Copy

    
    
    3
    6
    1 1 1 2 2 3
    6
    9 9 9 9 9 9
    6
    6 4 1 1 4 1
    

Output

Copy

    
    
    3
    0
    3
    

Note

Consider the first test case.

Initially a=[1,1,1,2,2,3].

In the first operation, Eshag can choose the subsequence containing a1, a5 and
a6, their average is equal to a1+a5+a63=63=2. So a6 will be deleted.

After this a=[1,1,1,2,2].

In the second operation, Eshag can choose the subsequence containing the whole
array a, the average of all its elements is equal to 75. So a4 and a5 will be
deleted.

After this a=[1,1,1].

In the second test case, Eshag can't delete any element.

The problem statement has recently been changed. View the changes.

×

B. Sifid and Strange Subsequences

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

A sequence (b1,b2,…,bk) is called strange, if the absolute difference between
any pair of its elements is greater than or equal to the maximum element in
the sequence. Formally speaking, it's strange if for every pair (i,j) with
1≤i<j≤k, we have |ai−aj|≥MAX, where MAX is the largest element of the
sequence. In particular, any sequence of length at most 1 is strange.

For example, the sequences (−2021,−1,−1,−1) and (−1,0,1) are strange, but
(3,0,1) is not, because |0−1|<3.

Sifid has an array a of n integers. Sifid likes everything big, so among all
the strange subsequences of a, he wants to find the length of the longest one.
Can you help him?

A sequence c is a subsequence of an array d if c can be obtained from d by
deletion of several (possibly, zero or all) elements.

Input

The first line contains an integer t (1≤t≤104) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains an integer n (1≤n≤105) — the length
of the array a.

The second line of each test case contains n integers a1,a2,…,an (−109≤ai≤109)
— the elements of the array a.

It is guaranteed that the sum of n over all test cases doesn't exceed 105.

Output

For each test case output a single integer — the length of the longest strange
subsequence of a.

Example

Input

Copy

    
    
    6
    4
    -1 -2 0 0
    7
    -3 4 -2 0 -4 6 1
    5
    0 5 -3 2 -5
    3
    2 3 1
    4
    -3 0 2 0
    6
    -3 -2 -1 1 1 1
    

Output

Copy

    
    
    4
    5
    4
    1
    3
    4
    

Note

In the first test case, one of the longest strange subsequences is
(a1,a2,a3,a4)

In the second test case, one of the longest strange subsequences is
(a1,a3,a4,a5,a7).

In the third test case, one of the longest strange subsequences is
(a1,a3,a4,a5).

In the fourth test case, one of the longest strange subsequences is (a2).

In the fifth test case, one of the longest strange subsequences is (a1,a2,a4).

The problem statement has recently been changed. View the changes.

×

C. Parsa's Humongous Tree

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

Parsa has a humongous tree on n vertices.

On each vertex v he has written two integers lv and rv.

To make Parsa's tree look even more majestic, Nima wants to assign a number av
(lv≤av≤rv) to each vertex v such that the beauty of Parsa's tree is maximized.

Nima's sense of the beauty is rather bizarre. He defines the beauty of the
tree as the sum of |au−av| over all edges (u,v) of the tree.

Since Parsa's tree is too large, Nima can't maximize its beauty on his own.
Your task is to find the maximum possible beauty for Parsa's tree.

Input

The first line contains an integer t (1≤t≤250) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains a single integer n (2≤n≤105) — the
number of vertices in Parsa's tree.

The i-th of the following n lines contains two integers li and ri
(1≤li≤ri≤109).

Each of the next n−1 lines contains two integers u and v (1≤u,v≤n,u≠v) meaning
that there is an edge between the vertices u and v in Parsa's tree.

It is guaranteed that the given graph is a tree.

It is guaranteed that the sum of n over all test cases doesn't exceed 2⋅105.

Output

For each test case print the maximum possible beauty for Parsa's tree.

Example

Input

Copy

    
    
    3
    2
    1 6
    3 8
    1 2
    3
    1 3
    4 6
    7 9
    1 2
    2 3
    6
    3 14
    12 20
    12 19
    2 12
    10 17
    3 17
    3 2
    6 5
    1 5
    2 6
    4 6
    

Output

Copy

    
    
    7
    8
    62
    

Note

The trees in the example:

![](https://espresso.codeforces.com/15dd9fa99c022387b0b8471ab9c69534beaa10de.png)

In the first test case, one possible assignment is a={1,8} which results in
|1−8|=7.

In the second test case, one of the possible assignments is a={1,5,9} which
results in a beauty of |1−5|+|5−9|=8

The problem statement has recently been changed. View the changes.

×

D. Kavi on Pairing Duty

time limit per test

1 second

memory limit per test

256 megabytes

input

standard input

output

standard output

Kavi has 2n points lying on the OX axis, i-th of which is located at x=i.

Kavi considers all ways to split these 2n points into n pairs. Among those, he
is interested in good pairings, which are defined as follows:

Consider n segments with ends at the points in correspondent pairs. The
pairing is called good, if for every 2 different segments A and B among those,
at least one of the following holds:

  * One of the segments A and B lies completely inside the other. 
  * A and B have the same length. 

Consider the following example:

![](https://espresso.codeforces.com/b1a1f1ddeec9def8c456b35697a922fbfc2e593a.png)

A is a good pairing since the red segment lies completely inside the blue
segment.

B is a good pairing since the red and the blue segment have the same length.

C is not a good pairing since none of the red or blue segments lies inside the
other, neither do they have the same size.

Kavi is interested in the number of good pairings, so he wants you to find it
for him. As the result can be large, find this number modulo 998244353.

Two pairings are called different, if some two points are in one pair in some
pairing and in different pairs in another.

Input

The single line of the input contains a single integer n (1≤n≤106).

Output

Print the number of good pairings modulo 998244353.

Examples

Input

Copy

    
    
    1
    

Output

Copy

    
    
    1

Input

Copy

    
    
    2
    

Output

Copy

    
    
    3

Input

Copy

    
    
    3
    

Output

Copy

    
    
    6

Input

Copy

    
    
    100
    

Output

Copy

    
    
    688750769

Note

The good pairings for the second example are:

![](https://espresso.codeforces.com/0c345b16ff051eade409b0d573d36f7a818d6714.png)

In the third example, the good pairings are:

![](https://espresso.codeforces.com/e76da31b813159fceda7384171f18a815ea7fa3d.png)

The problem statement has recently been changed. View the changes.

×

E. Trees of Tranquillity

time limit per test

3 seconds

memory limit per test

256 megabytes

input

standard input

output

standard output

Soroush and Keshi each have a labeled and rooted tree on n vertices. Both of
their trees are rooted from vertex 1.

Soroush and Keshi used to be at war. After endless decades of fighting, they
finally became allies to prepare a Codeforces round. To celebrate this
fortunate event, they decided to make a memorial graph on n vertices.

They add an edge between vertices u and v in the memorial graph if both of the
following conditions hold:

  * One of u or v is the ancestor of the other in Soroush's tree. 
  * Neither of u or v is the ancestor of the other in Keshi's tree. 

Here vertex u is considered ancestor of vertex v, if u lies on the path from 1
(the root) to the v.

Popping out of nowhere, Mashtali tried to find the maximum clique in the
memorial graph for no reason. He failed because the graph was too big.

Help Mashtali by finding the size of the maximum clique in the memorial graph.

As a reminder, clique is a subset of vertices of the graph, each two of which
are connected by an edge.

Input

The first line contains an integer t (1≤t≤3⋅105) — the number of test cases.
The description of the test cases follows.

The first line of each test case contains an integer n (2≤n≤3⋅105).

The second line of each test case contains n−1 integers a2,…,an (1≤ai<i), ai
being the parent of the vertex i in Soroush's tree.

The third line of each test case contains n−1 integers b2,…,bn (1≤bi<i), bi
being the parent of the vertex i in Keshi's tree.

It is guaranteed that the given graphs are trees.

It is guaranteed that the sum of n over all test cases doesn't exceed 3⋅105.

Output

For each test case print a single integer — the size of the maximum clique in
the memorial graph.

Example

Input

Copy

    
    
    4
    4
    1 2 3
    1 2 3
    5
    1 2 3 4
    1 1 1 1
    6
    1 1 1 1 2
    1 2 1 2 2
    7
    1 1 3 4 4 5
    1 2 1 4 2 5
    

Output

Copy

    
    
    1
    4
    1
    3
    

Note

In the first and third test cases, you can pick any vertex.

In the second test case, one of the maximum cliques is {2,3,4,5}.

In the fourth test case, one of the maximum cliques is {3,4,6}.

The problem statement has recently been changed. View the changes.

×

F. It's a bird! No, it's a plane! No, it's AaParsa!

time limit per test

5 seconds

memory limit per test

256 megabytes

input

standard input

output

standard output

There are n cities in Shaazzzland, numbered from 0 to n−1. Ghaazzzland, the
immortal enemy of Shaazzzland, is ruled by AaParsa.

As the head of the Ghaazzzland's intelligence agency, AaParsa is carrying out
the most important spying mission in Ghaazzzland's history on Shaazzzland.

AaParsa has planted m transport cannons in the cities of Shaazzzland. The i-th
cannon is planted in the city ai and is initially pointing at city bi.

It is guaranteed that each of the n cities has at least one transport cannon
planted inside it, and that no two cannons from the same city are initially
pointing at the same city (that is, all pairs (ai,bi) are distinct).

AaParsa used very advanced technology to build the cannons, the cannons rotate
every second. In other words, if the i-th cannon is pointing towards the city
x at some second, it will target the city (x+1)modn at the next second.

As their name suggests, transport cannons are for transportation, specifically
for human transport. If you use the i-th cannon to launch yourself towards the
city that it's currently pointing at, you'll be airborne for ci seconds before
reaching your target destination.

If you still don't get it, using the i-th cannon at the s-th second (using
which is only possible if you are currently in the city ai) will shoot you to
the city (bi+s)modn and you'll land in there after ci seconds (so you'll be
there in the (s+ci)-th second). Also note the cannon that you initially
launched from will rotate every second but you obviously won't change
direction while you are airborne.

AaParsa wants to use the cannons for travelling between Shaazzzland's cities
in his grand plan, and he can start travelling at second 0. For him to fully
utilize them, he needs to know the minimum number of seconds required to reach
city u from city v using the cannons for every pair of cities (u,v).

Note that AaParsa can stay in a city for as long as he wants.

Input

The first line contains two integers n and m (2≤n≤600,n≤m≤n2) — the number of
cities and cannons correspondingly.

The i-th line of the following m lines contains three integers ai, bi and ci
(0≤ai,bi≤n−1,1≤ci≤109), denoting the cannon in the city ai, which is initially
pointing to bi and travelling by which takes ci seconds.

It is guaranteed that each of the n cities has at least one transport cannon
planted inside it, and that no two cannons from the same city are initially
pointing at the same city (that is, all pairs (ai,bi) are distinct).

Output

Print n lines, each line should contain n integers.

The j-th integer in the i-th line should be equal to the minimum time required
to reach city j from city i.

Examples

Input

Copy

    
    
    3 4
    0 1 1
    0 2 3
    1 0 1
    2 0 1
    

Output

Copy

    
    
    0 1 2 
    1 0 2 
    1 2 0 
    

Input

Copy

    
    
    6 6
    0 0 1
    1 1 1
    2 2 1
    3 3 1
    4 4 1
    5 5 1
    

Output

Copy

    
    
    0 2 3 3 4 4 
    4 0 2 3 3 4 
    4 4 0 2 3 3 
    3 4 4 0 2 3 
    3 3 4 4 0 2 
    2 3 3 4 4 0 
    

Input

Copy

    
    
    4 5
    0 1 1
    1 3 2
    2 2 10
    3 0 1
    0 0 2
    

Output

Copy

    
    
    0 1 2 3 
    3 0 3 2 
    12 13 0 11 
    1 2 2 0 
    

Note

In the first example one possible path for going from 0 to 2 would be:

  1. Stay inside 0 and do nothing for 1 second. 
  2. Use the first cannon and land at 2 after 1 second. 

Note that: we could have used the second cannon in 0-th second but it would
have taken us 3 seconds to reach city 2 in that case.

  

Codeforces (c) Copyright 2010-2021 Mike Mirzayanov

The only programming contests Web 2.0 platform

