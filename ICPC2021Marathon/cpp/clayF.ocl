//no-unlocked
const int dbg = 0;
int totalcases, n, k, m;
int w[5d3+10], u[], A[], B[], marked[], backmarked[], ans[], asz, rsz, in[], out[], reg[];
int firstfilled[];
VI regions[];
graph g;
int dep[], vx[], pa[];
bool vis[];
int vis2[], timestamp;
int treenodes[], tsz;
set<int> disdist;
int coverage = 0;

void breakpoint(){
    if(dbg){
        //__asm int 3;
    }
}

bool mark(int x){
    if(x == -1) return false;
    return marked[x] || backmarked[x];
}

void dfs(int x, int par){
    if(x == 7) breakpoint();
    if(vis[x]) return;
    vis[x] = 1;
    int nx = par;
    if(par == -1 || firstfilled[par] == 1) nx = x;
    if(out[nx] > 1) nx = -1;
    bool flag = false;
    if(nx != -1){
        if(!mark(nx) && reg[nx] == -1){
            backmarked[nx] = 1;
            regions[rsz].push_back(nx), reg[nx] = rsz++;
            flag = true;
        }else{
            if(reg[x] != -1) nx = -1;
            if(in[x] == 1 && out[x] == 1 && nx != x && reg[x] == -1){
                regions[reg[nx]].push_back(x);
                reg[x] = reg[nx];
                flag = true;
            }
        }
    }
    if(!flag){
        if(reg[x] == -1){
            if((in[x] != 1 || out[x] != 1) && !mark(x)) backmarked[x] = 1;
            if(mark(x))   regions[rsz].push_back(x), reg[x] = rsz++;
        }
        if(mark(x))   nx = x;
        if(out[nx] > 1)   nx = -1;
        
    }   
    rep[g.edge[x]](i, g.es[x]) dfs(i, nx);
}

// we are going to build a tree based on the vertices that are unmarked and all the vertices have indegree 1
// we will mark our vertices accordinly instead of rep(i,n) if((in[i] != 1 || out[i] != 1) && !mark(i)) backmarked[i] = 1;

//get the tree
void dfs3(int x, int dis){
    if(mark(x) || in[x] > 1) return;
    if(vis2[x] == timestamp) return;
    treenodes[tsz++] = x;
    disdist.insert(dis);
    vis2[x] = timestamp;
    rep[g.edge[x]](i, g.es[x]) dfs3(i, dis+w[i]);
}

bool dfs4(int x, int dis, double midist, double madist){
    if(vis2[x] != timestamp) return false;
    bool ret = false, ret2 = false;
    if(midist+0.001 <= double(dis) <= madist-0.02){
        ret2 = true;
    }
    int cnt = 0;
    rep[g.edge[x]](i, g.es[x]){
        ++cnt;
        if(cnt == 1) ret = true;
       auto xxx = dfs4(i, dis+w[i], midist, madist);
       if(xxx != true){
           ret = false;
       }
    } 
    if(ret || ret2){
        ++coverage;
    }
    return ret || ret2;
}

bool markall(int x ,int dis, double midist, double madist, int rx){
    if(vis2[x] != timestamp) return false;
    bool ret = false, ret2 = false;
    if(midist+0.001 <= double(dis) <= madist-0.02){
        ret2 = true;
    }
    int cnt = 0;
    rep[g.edge[x]](i, g.es[x]){
        ++cnt;
        if(cnt == 1) ret = true;
        auto xxx = markall(i, dis+w[i], midist, madist, rx);
        if(xxx != true){
            ret = false;
        }
     } 
     if(ret || ret2){
        regions[rx].push_back(x);
        reg[x] = rx;
     }
     return ret || ret2;
}


void dfs2(int x){
    if(vis[x]) return;
    vis[x] = 1;
    if(reg[x] == -1){
        ++timestamp;
        tsz = 0;
        disdist.clear();
        dfs3(x, w[x]);
        int bestcoverage = 0;
        int yz = 0;
        for(auto & y : disdist){
            double madist = double(y);
            double midist = madist * 0.9;
            coverage = 0;
            auto res =  dfs4(x, w[x], midist, madist);
            if(res && coverage > bestcoverage) yz = y, bestcoverage = coverage;
        }
        if(yz > 0){
            if(!mark(x)) backmarked[x] = 1;
            double madist = double(yz);
            double midist = madist * 0.9;
            reg[x] = rsz++;
            markall(x, w[x], midist, madist, reg[x]);
        }
    }
    rep[g.edge[x]](i, g.es[x]) dfs2(i);
}


{ 
    rd(totalcases);
    rep(tcases, totalcases){
        if(dbg) wt("Case ", tcases, ":");
        rep(i, rsz) regions[i].clear();        
        rep(i, n) pa[i] = vx[i] = w[i] = u[i] = vx[i] = A[i] = B[i] = ans[i] =  marked[i] = backmarked[i] = in[i] = out[i]= dep[i] = vis[i] =  reg[i] =  0;
        memset(firstfilled, 0, sizeof(firstfilled));
        memset(reg, 0xff, sizeof(reg));
        memset(vis2, 0, sizeof(vis2));
        rsz =0;
        asz = 0;
        rd(n, w(n), k, (u--)(k), m, (A--,B--)(m) );
        g.setDirectEdge(n, m, A, B);
        rep(i, m) ++out[A[i]], ++in[B[i]];
        rep(i, k) ++marked[u[i]];
        dfs2(0);
        rep(i, n) vis[i] = 0;
        rep(i, n) if(reg[i] != -1) firstfilled[i] = 1;
        dfs(0, -1);
        rep(i, n) if(backmarked[i]) ans[asz++] = i;
        rep(i, asz) ++ans[i];
        wt(asz, ans(asz));
        wt(rsz);
        rep(i,rsz){
            VI & y = regions[i];
            asz = 0;
            rep(j, y.size()){
                ans[asz++] = y[j]+1;
            }
            wt(asz, ans(asz));
        }
    }
}