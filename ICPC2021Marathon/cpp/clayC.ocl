//no-unlocked
const int dbg = 0;
int totalcases, n, k, m;
int w[5d3+10], u[], A[], B[], marked[], backmarked[], ans[], asz, rsz, in[], out[], reg[];
VI regions[];
graph g;
int dep[], vx[], pa[];
bool vis[];
bool mark(int x){
    if(x == -1) return false;
    return marked[x] || backmarked[x];
}
void dfs(int x, int par){
    if(vis[x]) return;
    vis[x] = 1;
    int nx = par;
    if(par == -1)   nx = x;
    if(out[nx] > 1)  nx = -1;
    bool flag = false;
    if(nx != -1){
        if(!mark(nx)){
            backmarked[nx] = 1;
            regions[rsz].push_back(nx), reg[nx] = rsz++;
            flag = true;
        }else{
            if(in[x] == 1 && out[x] == 1 && nx != x){
                regions[reg[nx]].push_back(x);
                flag = true;
            }
        }
    }
    if(!flag){
        if(mark(x)) regions[rsz].push_back(x), reg[x] = rsz++;
        if(mark(x)) nx = x;
        if(out[nx] > 1)  nx = -1;
        
    }   
    rep[g.edge[x]](i, g.es[x]) dfs(i, nx);
}


{ 
    rd(totalcases);
    rep(tcases, totalcases){
        if(dbg) wt("Case ", tcases, ":");
        rep(i, rsz) regions[i].clear();
        rep(i, n) pa[i] = vx[i] = w[i] = u[i] = vx[i] = A[i] = B[i] = ans[i] =  marked[i] = backmarked[i] = in[i] = out[i]= dep[i] = vis[i] =  reg[i] =  0;
        rsz =0;
        asz = 0;
        rd(n, w(n), k, (u--)(k), m, (A--,B--)(m) );
        g.setDirectEdge(n, m, A, B);
        rep(i, m) ++out[A[i]], ++in[B[i]];
        rep(i, k) ++marked[u[i]];
        rep(i,n) if((in[i] != 1 || out[i] != 1) && !mark(i)) backmarked[i] = 1;
        //rep(i, n) if(mark(i)) regions[rsz].push_back(i), reg[i] = rsz++;
        dfs(0, -1);
        rep(i, n) if(backmarked[i]) ans[asz++] = i;
        rep(i, asz) ++ans[i];
        wt(asz, ans(asz));
        wt(rsz);
        rep(i,rsz){
            VI & y = regions[i];
            asz = 0;
            rep(j, y.size()) ans[asz++] = y[j]+1;
            wt(asz, ans(asz));
        }
    }
}
