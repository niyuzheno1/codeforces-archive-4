//no-unlocked
const long long is_query_G = -(1LL<<62);

template<class T> struct line_G{
  T m;
  T b;
  mutable function<const line_G*()> succ;
}
;
template<class T> bool operator<(const line_G<T> & lhs, const line_G<T> & rhs){
  if (rhs.b != is_query_G){
    return lhs.m < rhs.m;
  }
  const line_G<T> * s = lhs.succ();
  if (!s){
    return 0;
  }
  T x = rhs.m;
  return lhs.b - s->b < (s->m - lhs.m) * x;
}
template<class T> 
struct dynamic_hull_max : public multiset<line_G<T>>{
  const long long inf = LLONG_MAX;
  bool bad(void * yy){
    iterator * u = (iterator *)yy;
    iterator y = *u;
    auto z = next(y);
    if (y == begin()){
      if (z == end()){
        return 0;
      }
      return y->m == z->m && y->b <= z->b;
    }
    auto x = prev(y);
    if (z == end()){
      return y->m == x->m && y->b <= x->b;
    }
    T v1 = (x->b - y->b);
    if (y->m == x->m){
      v1 = x->b > y->b ? inf : -inf;
    }
    else{
      v1 /= (y->m - x->m);
    }
    T v2 = (y->b - z->b);
    if (z->m == y->m){
      v2 = y->b > z->b ? inf : -inf;
    }
    else{
      v2 /= (z->m - y->m);
    }
    return v1 >= v2;
  }
  void insert_line(T m, T b){
    auto y = insert({ m, b });
    y->succ = [=] { return next(y) == end() ? 0 : &*next(y); };
    if (bad((void*)&y)){
      erase(y);
      return;
    }
    while (next(y) != end()){
      auto yy = next(y);
      if(bad((void*)&yy)){
        erase(next(y));
      }
      else{
        break;
      }
    }
    while (y != begin()){
      auto yy = prev(y);
      if(bad((void*)&yy)){
        erase(prev(y));
      }
      else{
        break;
      }
    }
  }
  T eval(T x){
    line_G<T> tmp;
    tmp.b = is_query_G;
    tmp.m = x;
    auto l = *lower_bound(tmp);
    return l.m * x + l.b;
  }
}
;
template<class T> 
struct dynamic_hull_min{
  dynamic_hull_max<T> cht;
  void insert_line(T m, T b){
    cht.insert_line(-m, -b);
  }
  T eval(T x){
    return -cht.eval(x);
  }
}
;
int n;
ll s;
int v[2d5+10], c[];
dynamic_hull_max<ll> cht;
ll dp[];
{ 
    rd(n, s, (v,c)(n));
    sortA(n, c, v);
    if(c[0] != 0){
        wt(-1);
        return 0;
    }
    cht.insert_line(v[0],0);
    ll ans = s/+v[0];
    rep(i, 1, n){
        auto xx = bsearch_min[ll, T, dp[i-1], s+10](cht.eval(T) >= c[i]);
        dp[i] = xx;
        auto mi = cht.eval(xx) - c[i];
        cht.insert_line(v[i], -dp[i]*v[i] + mi);
        ans <?= xx + (s-mi) /+ (v[i]);
    }
    wt(ans);
}
